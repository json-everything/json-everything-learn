@using BlazorMonaco.Editor
@using Json.Schema
@using LearnJsonEverything.Services
@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.CSharp
@using System.Reflection
@using System.Text.Encodings.Web
@using System.Text.Json
@using Json.More
@using LearnJsonEverything.Services.Hosts
@using EditorOptions = LearnJsonEverything.Services.EditorOptions

@inject DataManager DataManager;
@inject IJSRuntime JsRuntime;
@inject HttpClient Client;

<div id="layout" class="row fill-remaining row-margin-reset">
	<div class="col-3 d-flex h-100">
		<div class="grid-panel flex-grow-1 scroll">
			<ul role="listbox">
				@foreach (var lesson in _lessons)
				{
					@if (lesson.Skip) continue;

					<li id="@lesson.Id" role="option" @onclick="() => SelectLesson(lesson.Id)">
						<span class="@(lesson.Achieved ? "" : "invisible")">@Iconography.SuccessIcon</span>
						@lesson.Title
					</li>
				}
			</ul>
		</div>
	</div>
	<div class="col-4 d-flex h-100">
		<div id="instructions-panel" class="grid-panel flex-grow-1 scroll">
			<MarkdownSpan Content="@Instructions"></MarkdownSpan>
		</div>
	</div>
	<div class="col-5 d-flex">
		<div id="right-panel" class="row row-margin-reset flex-grow-1">
			<div id="workspace" class="col-12 d-flex flex-grow-1">
				<div class="grid-panel flex-grow-1">
					<StandaloneCodeEditor @ref="_codeEditor" Id="editor-schema" ConstructionOptions="OptionsForEditor"
					                      CssClass="h-100"></StandaloneCodeEditor>
				</div>
			</div>
			<div id="controls" class="col-12">
				<div class="d-flex">
					<button class="btn btn-primary m-1" disabled="@_previousButtonDisabled" @onclick="PreviousLesson">&lt; Previous</button>
					<button class="btn btn-primary m-1" @onclick="Run">Run</button>
					<button class="btn btn-primary m-1" @onclick="RevealSolution">Reveal Solution</button>
					<button class="btn btn-primary m-1" @onclick="ResetLesson">Reset</button>
					<button class="btn btn-primary m-1" disabled="@_nextButtonDisabled" @onclick="NextLesson">Next &gt;</button>
				</div>
			</div>
			<div id="output" class="col-12 d-flex">
				<div class="grid-panel flex-grow-1">
					<StandaloneCodeEditor @ref="_outputEditor" Id="editor-output" ConstructionOptions="OptionsForOutput"
					                      CssClass="h-100"></StandaloneCodeEditor>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
	#pragma warning disable CS8618
	private StandaloneCodeEditor _codeEditor;
	private StandaloneCodeEditor _outputEditor;
	private LessonPlan _lessons = new([]);
	private LessonData? _currentLesson;
	private bool _previousButtonDisabled = true;
	private bool _nextButtonDisabled = true;

	[Parameter]
	public string LessonSource { get; set; }
	[Parameter]
	public ILessonHost Host { get; set; }

	private string Instructions { get; set; }

	private static StandaloneEditorConstructionOptions OptionsForEditor(StandaloneCodeEditor _) => EditorOptions.Basic("csharp", 4);
	private static StandaloneEditorConstructionOptions OptionsForOutput(StandaloneCodeEditor _) => EditorOptions.Readonly("json", 2);
#pragma warning restore CS8618

	private async Task Run()
	{
		try
		{
			var userCode = await _codeEditor.GetValue();

			await _outputEditor.SetValue(string.Empty);
			await _outputEditor.SetLanguageAsync("json", JsRuntime);

			_currentLesson!.UserCode = userCode;
			var results = Host.Run(_currentLesson);

			await _outputEditor.SetValue(string.Join(Environment.NewLine, results!));
			UpdateNavigation();
			await SaveLessonPlanCompletion();
		}
		catch (Exception e)
		{
			await _outputEditor.SetLanguageAsync("text", JsRuntime);
			await _outputEditor.SetValue($"An exception occurred while executing user code:\n\n{e.GetType().Name}: {e.Message}\n{e.StackTrace}");
		}
	}

	private Task RevealSolution()
	{
		return _codeEditor.SetValue(_currentLesson?.Solution ?? string.Empty);
	}

	private async Task ResetLesson()
	{
		_currentLesson!.UserCode = null;
		_currentLesson.Achieved = false;
		await SaveLessonPlanCompletion();
		await LoadLesson();
	}

	private Task PreviousLesson()
	{
		_currentLesson = _lessons.GetPrevious(_currentLesson?.Id);
		return LoadLesson();
	}

	private Task NextLesson()
	{
		_currentLesson = _lessons.GetNext(_currentLesson?.Id);
		return LoadLesson();
	}

	private Task Reset()
	{
		return LoadLesson();
	}

	private async Task LoadLesson()
	{
		_currentLesson ??= _lessons[0];
		Instructions = InstructionsBuilder.BuildInstructions(_currentLesson);
		_nextButtonDisabled = !CanMoveToNextLesson();
		await _codeEditor.SetValue(_currentLesson.UserCode ?? _currentLesson.ContextCode);
		await _outputEditor.SetValue(string.Empty);
		UpdateNavigation();
		await JsRuntime.InvokeVoidAsync("BlazorScrollToTopOfElement", "instructions-panel");
	}

	private void UpdateNavigation()
	{
		_previousButtonDisabled = !CanMoveToPreviousLesson();
		_nextButtonDisabled = !CanMoveToNextLesson();
	}

	private bool CanMoveToPreviousLesson()
	{
		if (_currentLesson is null) return false;
		return _currentLesson.Index != 0;
	}

	private bool CanMoveToNextLesson()
	{
		if (_currentLesson is null) return false;
		if (_currentLesson.Index == _lessons.Count - 1) return false;
		return _currentLesson.Achieved;
	}

	protected override async Task OnInitializedAsync()
	{
		await DownloadLessonPlan();
		await LoadLesson();

		await base.OnInitializedAsync();
	}

	private async Task DownloadLessonPlan()
	{
		var json = await Client.GetStringAsync(LessonSource);
		_lessons = JsonSerializer.Deserialize(json, SerializerContext.Default.LessonPlan)!;

		var completed = await LoadLessonPlanCompletion();
		foreach (var saveData in completed)
		{
			var lesson = _lessons[saveData.id];
			lesson.Achieved = saveData.completed;
			lesson.UserCode = saveData.userCode;
		}

		_currentLesson = _lessons.SkipWhile(x => x.Achieved).FirstOrDefault() ?? _lessons.Last();
	}

	private async Task SaveLessonPlanCompletion()
	{
		var completionData = _lessons.Where(x => x.UserCode is not null)
			.Select(x => new SchemaSaveData(x.Id, x.Achieved, x.UserCode))
			.ToArray();
		var json = JsonSerializer.Serialize(completionData, SerializerContext.Default.SchemaSaveDataArray);

		await DataManager.Set(LessonSource, json);
	}

	private async Task<SchemaSaveData[]> LoadLessonPlanCompletion()
	{
		var json = await DataManager.Get(LessonSource) ?? await DataManager.Get(Path.ChangeExtension(LessonSource, ".yaml"));
		if (json is null) return [];

		return JsonSerializer.Deserialize(json, SerializerContext.Default.SchemaSaveDataArray)!;
	}

	private async Task SelectLesson(Guid lessonId)
	{
		_currentLesson = _lessons[lessonId];
		await LoadLesson();
	}
}
